// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.1
//    <NameSpace>HomeModbus.Models</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>None</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>True</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace HomeModbus.Models
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class HomeSettings
    {

        private List<HomeSettingsRoom> _rooms;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlArrayItemAttribute("Room", IsNullable = false)]
        public List<HomeSettingsRoom> Rooms
        {
            get
            {
                return this._rooms;
            }
            set
            {
                this._rooms = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettings));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettings object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettings object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettings object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettings obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettings);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettings obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettings Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettings)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettings Deserialize(System.IO.Stream s)
        {
            return ((HomeSettings)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettings object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettings object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettings object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettings obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettings);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettings obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettings LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoom
    {

        private List<HomeSettingsRoomControllers> _controllers;

        private string _name;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Controllers")]
        public List<HomeSettingsRoomControllers> Controllers
        {
            get
            {
                return this._controllers;
            }
            set
            {
                this._controllers = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoom));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoom object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoom object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoom object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoom obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoom);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoom obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoom Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoom)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoom Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoom)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoom object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoom object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoom object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoom obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoom);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoom obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoom LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllers
    {

        private HomeSettingsRoomControllersController _controller;

        private static XmlSerializer serializer;

        public HomeSettingsRoomControllersController Controller
        {
            get
            {
                return this._controller;
            }
            set
            {
                this._controller = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllers));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllers object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllers object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllers);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllers obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllers Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllers)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllers Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllers)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllers object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllers object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllers);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllers obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllers LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllersController
    {

        private List<HomeSettingsRoomControllersControllerParameter> _parameters;

        private string _name;

        private byte _modbusAddress;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlArrayItemAttribute("Parameter", IsNullable = false)]
        public List<HomeSettingsRoomControllersControllerParameter> Parameters
        {
            get
            {
                return this._parameters;
            }
            set
            {
                this._parameters = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public byte ModbusAddress
        {
            get
            {
                return this._modbusAddress;
            }
            set
            {
                this._modbusAddress = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllersController));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllersController object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllersController object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersController object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllersController obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersController);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllersController obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllersController Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllersController)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllersController Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllersController)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllersController object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllersController object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersController object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersController obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersController);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersController obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllersController LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllersControllerParameter
    {

        private HomeSettingsRoomControllersControllerParameterVisibility _visibility;

        private string _name;

        private ModbusTypes _modbusType;

        private DataTypes _dataType;

        private byte _modbusIndex;

        private string _refreshRate;

        private static XmlSerializer serializer;

        public HomeSettingsRoomControllersControllerParameter()
        {
            this._dataType = DataTypes.UInt16;
        }

        public HomeSettingsRoomControllersControllerParameterVisibility Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                this._visibility = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ModbusTypes ModbusType
        {
            get
            {
                return this._modbusType;
            }
            set
            {
                this._modbusType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DataTypes.UInt16)]
        public DataTypes DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                this._dataType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public byte ModbusIndex
        {
            get
            {
                return this._modbusIndex;
            }
            set
            {
                this._modbusIndex = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string RefreshRate
        {
            get
            {
                return this._refreshRate;
            }
            set
            {
                this._refreshRate = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllersControllerParameter));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameter object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllersControllerParameter object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameter);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameter obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameter Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllersControllerParameter)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllersControllerParameter Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllersControllerParameter)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllersControllerParameter object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameter);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameter obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameter LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllersControllerParameterVisibility
    {

        private object _digitalIndicator;

        private HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon _showBalloon;

        private HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator _analogIndicator;

        private object _lastTimeIndicator;

        private object _chart;

        private static XmlSerializer serializer;

        public object DigitalIndicator
        {
            get
            {
                return this._digitalIndicator;
            }
            set
            {
                this._digitalIndicator = value;
            }
        }

        public HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon ShowBalloon
        {
            get
            {
                return this._showBalloon;
            }
            set
            {
                this._showBalloon = value;
            }
        }

        public HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator AnalogIndicator
        {
            get
            {
                return this._analogIndicator;
            }
            set
            {
                this._analogIndicator = value;
            }
        }

        public object LastTimeIndicator
        {
            get
            {
                return this._lastTimeIndicator;
            }
            set
            {
                this._lastTimeIndicator = value;
            }
        }

        public object Chart
        {
            get
            {
                return this._chart;
            }
            set
            {
                this._chart = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllersControllerParameterVisibility));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibility object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllersControllerParameterVisibility object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibility obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibility);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibility obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibility Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllersControllerParameterVisibility)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllersControllerParameterVisibility Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllersControllerParameterVisibility)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibility object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllersControllerParameterVisibility object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibility obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibility);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibility obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibility LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon
    {

        private HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose _onClose;

        private List<string> _text;

        private BalloonTypes _type;

        private string _text1;

        private System.Nullable<bool> _showWhileParameterSet;

        private static XmlSerializer serializer;

        public HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose OnClose
        {
            get
            {
                return this._onClose;
            }
            set
            {
                this._onClose = value;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public List<string> Text
        {
            get
            {
                return this._text;
            }
            set
            {
                this._text = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BalloonTypes Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("Text")]
        public string Text1
        {
            get
            {
                return this._text1;
            }
            set
            {
                this._text1 = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ShowWhileParameterSet
        {
            get
            {
                if (this._showWhileParameterSet.HasValue)
                {
                    return this._showWhileParameterSet.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._showWhileParameterSet = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowWhileParameterSetSpecified
        {
            get
            {
                return this._showWhileParameterSet.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._showWhileParameterSet = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityShowBalloon LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose
    {

        private object _resetParameter;

        private static XmlSerializer serializer;

        public object ResetParameter
        {
            get
            {
                return this._resetParameter;
            }
            set
            {
                this._resetParameter = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityShowBalloonOnClose LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    public enum BalloonTypes
    {

        /// <remarks/>
        Normal,

        /// <remarks/>
        Info,

        /// <remarks/>
        Warning,

        /// <remarks/>
        Exclamation,

        /// <remarks/>
        Alarm,

        /// <remarks/>
        Error,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator
    {

        private HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale _scale;

        private static XmlSerializer serializer;

        public HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale Scale
        {
            get
            {
                return this._scale;
            }
            set
            {
                this._scale = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicator LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale
    {

        private List<HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange> _ranges;

        private int _min;

        private int _max;

        private System.Nullable<int> _majorCount;

        private System.Nullable<int> _minorCount;

        private System.Nullable<int> _goodValue;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlArrayItemAttribute("Range", IsNullable = false)]
        public List<HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange> Ranges
        {
            get
            {
                return this._ranges;
            }
            set
            {
                this._ranges = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Min
        {
            get
            {
                return this._min;
            }
            set
            {
                this._min = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Max
        {
            get
            {
                return this._max;
            }
            set
            {
                this._max = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MajorCount
        {
            get
            {
                if (this._majorCount.HasValue)
                {
                    return this._majorCount.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._majorCount = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MajorCountSpecified
        {
            get
            {
                return this._majorCount.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._majorCount = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MinorCount
        {
            get
            {
                if (this._minorCount.HasValue)
                {
                    return this._minorCount.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._minorCount = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MinorCountSpecified
        {
            get
            {
                return this._minorCount.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._minorCount = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int GoodValue
        {
            get
            {
                if (this._goodValue.HasValue)
                {
                    return this._goodValue.Value;
                }
                else
                {
                    return default(int);
                }
            }
            set
            {
                this._goodValue = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GoodValueSpecified
        {
            get
            {
                return this._goodValue.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._goodValue = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScale LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange
    {

        private double _startValue;

        private double _endValue;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double StartValue
        {
            get
            {
                return this._startValue;
            }
            set
            {
                this._startValue = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double EndValue
        {
            get
            {
                return this._endValue;
            }
            set
            {
                this._endValue = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = true;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange Deserialize(System.IO.Stream s)
        {
            return ((HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static HomeSettingsRoomControllersControllerParameterVisibilityAnalogIndicatorScaleRange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    public enum ModbusTypes
    {

        /// <remarks/>
        Discrete,

        /// <remarks/>
        Coil,

        /// <remarks/>
        InputRegister,

        /// <remarks/>
        HoldingRegister,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    public enum DataTypes
    {

        /// <remarks/>
        UInt16,

        /// <remarks/>
        Float,

        /// <remarks/>
        RdDateTime,

        /// <remarks/>
        RdTime,
    }
}
#pragma warning restore
